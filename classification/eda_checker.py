import os

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


class EDAChecker:
    def __init__(self, file_path):
        """
        Inicializ√°lja az objektumot √©s bet√∂lt√©si √∫tvonalat ad meg.
        """
        self.file_path = file_path
        self.data = None  # Adat bet√∂lt√©s√©hez √ºres attrib√∫tum

    def load_data(self):
        """
        Adatok bet√∂lt√©se a megadott √∫tvonalr√≥l.
        """
        try:
            self.data = pd.read_csv(self.file_path)
            print("‚úÖ Adatok bet√∂ltve.")
        except Exception as e:
            print(f"‚ùå Hiba az adatok bet√∂lt√©sekor: {e}")

    def basic_info(self):
        """
        Alapinform√°ci√≥ az adathalmazr√≥l.
        """
        print("\nüóÇÔ∏è Alapinform√°ci√≥k:")
        print(self.data.head(10).to_string(index=False))
        print("\nüìä Adathalmaz inform√°ci√≥:")
        print(self.data.info())
        print("\nüîé Hi√°nyz√≥ √©rt√©kek sz√°ma:")
        print(self.data.isnull().sum())

    def plot_missing_values(self):
        """
        Hi√°nyz√≥ √©rt√©kek √°br√°zol√°sa heatmappal.
        """
        plt.figure(figsize=(12, 8))
        sns.heatmap(self.data.isnull(), cbar=False, cmap="viridis")
        plt.title("‚ùå Hi√°nyz√≥ √©rt√©kek √°br√°zol√°sa")
        plt.show()

    def plot_distribution(self, column):
        """
        √Åltal√°nos eloszl√°sok √°br√°zol√°sa az adott oszlopra.
        """
        plt.figure(figsize=(10, 6))
        sns.histplot(self.data[column].dropna(), kde=True)
        plt.title(f"üìä Oszlop eloszl√°sa: {column}")
        plt.xlabel(column)
        plt.ylabel('Gyakoris√°g')
        plt.show()

    def plot_correlation(self):
        """
        Korrel√°ci√≥ √°br√°zol√°sa oszlopok k√∂z√∂tt.
        """
        plt.figure(figsize=(12, 10))
        sns.heatmap(self.data.corr(), annot=True, fmt=".2f", cmap="coolwarm", center=0)
        plt.title("üîó Oszlopok k√∂z√∂tti korrel√°ci√≥")
        plt.show()

    def feature_summary(self):
        """
        Statisztikai √∂sszegz√©s numerikus oszlopokra.
        """
        print("\nüìä Numerikus oszlopok statisztikai √∂sszegz√©se:")
        print(self.data.describe())

    def run_all(self):
        """
        Az √∂sszes elemz√©si funkci√≥ egyszerre futtat√°sa.
        """
        self.load_data()
        self.basic_info()
        self.plot_missing_values()
        self.feature_summary()
        self.plot_correlation()

        # √Åltal√°nos eloszl√°sok √°br√°zol√°sa numerikus oszlopokra
        for col in self.data.select_dtypes(include=["float64", "int64"]).columns:
            self.plot_distribution(col)


# Haszn√°lati p√©lda
if __name__ == "__main__":
    # Dynamikus √∫tvonal sz√°m√≠t√°sa a szkript hely√©r≈ël
    script_dir = os.path.dirname(os.path.abspath(__file__))  # A szkript hely√©nek el√©r√©si √∫tja
    file_path = os.path.join(script_dir, "..", "classification", "output", "cleaned_final_walmart_data.csv")

    print("Ellen≈ërzend≈ë √∫tvonal:", file_path)

    eda_checker = EDAChecker(file_path)  # Objektum l√©trehoz√°sa
    eda_checker.run_all()  # Teljes elemz√©s futtat√°sa