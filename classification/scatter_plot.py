import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score, accuracy_score, classification_report, roc_curve


# Adatok bet√∂lt√©se √©s el≈ëk√©sz√≠t√©se
def load_and_prepare_data():
    """
    Dinamikusan bet√∂lti az adatokat a relat√≠v √∫tvonal alapj√°n.
    """
    try:
        # Dinamikus el√©r√©si √∫t be√°ll√≠t√°sa
        script_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(script_dir, "..", "classification", "output", "final_without_outlier_walmart_data.csv")

        # Adatok bet√∂lt√©se
        data = pd.read_csv(file_path)
        print(f"‚úÖ F√°jl sikeresen beolvasva: {file_path}")

        # C√©lv√°ltoz√≥ l√©trehoz√°sa (Gender -> Target)
        data['Target'] = data['Gender']

        # F√ºggetlen v√°ltoz√≥k
        features = ['Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Product_Category', 'Purchase']
        X = data[features]
        y = data['Target']

        # Kezelj√ºk a NaN √©rt√©keket
        X = X.dropna(subset=features)
        y = y.loc[X.index]

        print("‚úÖ Adatok el≈ëk√©sz√≠tve.")
        return X, y
    except Exception as e:
        print(f"Hiba adatok bet√∂lt√©se sor√°n: {e}")


# Modell sz√©tbont√°sa
def split_data(X, y):
    """
    Az adatok sz√©tbont√°sa 70% training, 10% valid√°ci√≥, 20% teszt szettekre.
    """
    try:
        # Sz√©tbont√°s: 70%-30%
        X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        validation_fraction = 0.1 / (0.7 + 0.1)  # Normaliz√°ljuk a valid√°ci√≥s ar√°nyt
        X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=validation_fraction,
                                                          random_state=42)

        print("‚úÖ Adatok sz√©tbontva: Train, Validation, Teszt szettek.")
        return X_train, X_val, X_test, y_train, y_val, y_test
    except Exception as e:
        print(f"Hiba sz√©tbont√°s sor√°n: {e}")


# Logistic Regression modell tan√≠t√°sa
def train_model(X_train, y_train):
    """
    Tan√≠tjuk a Logistic Regression modellt.
    """
    try:
        # Sk√°l√°z√°s
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)

        # Modell l√©trehoz√°sa √©s tan√≠t√°sa
        model = LogisticRegression(max_iter=1000, random_state=42)
        model.fit(X_train_scaled, y_train)
        print("‚úÖ Modell sikeresen tan√≠tva.")
        return model, scaler
    except Exception as e:
        print(f"Hiba a modell tan√≠t√°sa sor√°n: {e}")


# ROC g√∂rbe √°br√°zol√°sa
def plot_roc_curve(model, scaler, X_test, y_test):
    """
    ROC g√∂rbe √°br√°zol√°sa a teszt szetten.
    """
    try:
        # Sk√°l√°z√°s
        X_test_scaled = scaler.transform(X_test)

        # Predikci√≥k kisz√°m√≠t√°sa
        y_test_prob = model.predict_proba(X_test_scaled)[:, 1]

        # ROC g√∂rbe √©rt√©kei
        fpr, tpr, _ = roc_curve(y_test, y_test_prob)

        # √Åbr√°zol√°s
        plt.figure(figsize=(10, 6))
        plt.plot(fpr, tpr, color='blue', lw=2, label='ROC Curve')
        plt.plot([0, 1], [0, 1], linestyle='--', color='gray', lw=1)  # Diagon√°lis referencia
        plt.xlabel('False Positive Rate')
        plt.ylabel('True Positive Rate')
        plt.title('ROC G√∂rbe')
        plt.legend(loc='best')
        plt.grid()
        plt.show()

        print("‚úÖ ROC g√∂rbe megjelen√≠tve.")
    except Exception as e:
        print(f"Hiba az ROC g√∂rbe √°br√°zol√°s√°ban: {e}")


# Modell √©rt√©kel√©se
def evaluate_model(model, scaler, X_val, y_val, X_test, y_test):
    """
    A valid√°ci√≥s √©s teszt szetteken √©rt√©kelj√ºk a modellt.
    """
    try:
        # Sk√°l√°z√°s valid√°ci√≥ra √©s teszt adatokra
        X_val_scaled = scaler.transform(X_val)
        X_test_scaled = scaler.transform(X_test)

        # √ârt√©kel√©s valid√°ci√≥s szettel
        y_val_pred = model.predict(X_val_scaled)
        val_accuracy = accuracy_score(y_val, y_val_pred)
        val_auc = roc_auc_score(y_val, model.predict_proba(X_val_scaled)[:, 1])

        # √ârt√©kel√©s teszt szettel
        y_test_pred = model.predict(X_test_scaled)
        test_accuracy = accuracy_score(y_test, y_test_pred)
        test_auc = roc_auc_score(y_test, model.predict_proba(X_test_scaled)[:, 1])

        # Ki√©rt√©kel√©si riport
        print("\n‚úÖ **Valid√°ci√≥s szett eredm√©nyei:**")
        print(f"Pontoss√°g: {val_accuracy:.4f}")
        print(f"AUC: {val_auc:.4f}")
        print("\n‚úÖ **Teszt szett eredm√©nyei:**")
        print(f"Pontoss√°g: {test_accuracy:.4f}")
        print(f"AUC: {test_auc:.4f}")

        print("\nüìä **Classification Report:**")
        print("\n", classification_report(y_test, y_test_pred))

        # √Åbr√°zoljuk az ROC g√∂rb√©t
        plot_roc_curve(model, scaler, X_test, y_test)

    except Exception as e:
        print(f"Hiba az √©rt√©kel√©s sor√°n: {e}")


if __name__ == "__main__":
    # Adatok bet√∂lt√©se
    X, y = load_and_prepare_data()
    # Adatok sz√©tbont√°sa
    X_train, X_val, X_test, y_train, y_val, y_test = split_data(X, y)
    # Modell tan√≠t√°sa
    model, scaler = train_model(X_train, y_train)
    # Modell √©rt√©kel√©se
    evaluate_model(model, scaler, X_val, y_val, X_test, y_test)
